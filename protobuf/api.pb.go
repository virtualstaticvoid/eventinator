// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// options for the delivery of messages
type DeliveryOption int32

const (
	// only new messages since subscription started
	// this is the default option
	DeliveryOption_NewOnly DeliveryOption = 0
	// use with care!
	DeliveryOption_DeliverAllAvailable DeliveryOption = 1
	// a specific message
	DeliveryOption_StartAtSequence DeliveryOption = 2
	// messages since date/time
	DeliveryOption_StartAtTime DeliveryOption = 3
	// messages in the last 10 minutes
	DeliveryOption_StartAtDuration DeliveryOption = 4
	// from the last received message (1)
	DeliveryOption_StartWithLastReceived DeliveryOption = 5
	// start after last acknowledged message (durable subscription per subscriber)
	DeliveryOption_StartAfterLastProcessed DeliveryOption = 6
)

var DeliveryOption_name = map[int32]string{
	0: "NewOnly",
	1: "DeliverAllAvailable",
	2: "StartAtSequence",
	3: "StartAtTime",
	4: "StartAtDuration",
	5: "StartWithLastReceived",
	6: "StartAfterLastProcessed",
}

var DeliveryOption_value = map[string]int32{
	"NewOnly":                 0,
	"DeliverAllAvailable":     1,
	"StartAtSequence":         2,
	"StartAtTime":             3,
	"StartAtDuration":         4,
	"StartWithLastReceived":   5,
	"StartAfterLastProcessed": 6,
}

func (x DeliveryOption) String() string {
	return proto.EnumName(DeliveryOption_name, int32(x))
}

func (DeliveryOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

// represents the context of a message; in this case a system context
type SystemContext struct {
	// identifier of the user who initiated the message
	UserIdentifier       string   `protobuf:"bytes,1,opt,name=user_identifier,json=userIdentifier,proto3" json:"user_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemContext) Reset()         { *m = SystemContext{} }
func (m *SystemContext) String() string { return proto.CompactTextString(m) }
func (*SystemContext) ProtoMessage()    {}
func (*SystemContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *SystemContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemContext.Unmarshal(m, b)
}
func (m *SystemContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemContext.Marshal(b, m, deterministic)
}
func (m *SystemContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemContext.Merge(m, src)
}
func (m *SystemContext) XXX_Size() int {
	return xxx_messageInfo_SystemContext.Size(m)
}
func (m *SystemContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemContext.DiscardUnknown(m)
}

var xxx_messageInfo_SystemContext proto.InternalMessageInfo

func (m *SystemContext) GetUserIdentifier() string {
	if m != nil {
		return m.UserIdentifier
	}
	return ""
}

// represents the context of a message; in this case a tenant context
type TenantContext struct {
	// identifier of the user who initiated the message
	UserIdentifier string `protobuf:"bytes,1,opt,name=user_identifier,json=userIdentifier,proto3" json:"user_identifier,omitempty"`
	// optionally, the identifier of the tenancy to which the message applies
	TenantIdentifier     string   `protobuf:"bytes,2,opt,name=tenant_identifier,json=tenantIdentifier,proto3" json:"tenant_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TenantContext) Reset()         { *m = TenantContext{} }
func (m *TenantContext) String() string { return proto.CompactTextString(m) }
func (*TenantContext) ProtoMessage()    {}
func (*TenantContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *TenantContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TenantContext.Unmarshal(m, b)
}
func (m *TenantContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TenantContext.Marshal(b, m, deterministic)
}
func (m *TenantContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantContext.Merge(m, src)
}
func (m *TenantContext) XXX_Size() int {
	return xxx_messageInfo_TenantContext.Size(m)
}
func (m *TenantContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantContext.DiscardUnknown(m)
}

var xxx_messageInfo_TenantContext proto.InternalMessageInfo

func (m *TenantContext) GetUserIdentifier() string {
	if m != nil {
		return m.UserIdentifier
	}
	return ""
}

func (m *TenantContext) GetTenantIdentifier() string {
	if m != nil {
		return m.TenantIdentifier
	}
	return ""
}

// publish request type
type PublishRequest struct {
	// unique UUID for the request
	// e.g. "123e4567-e89b-12d3-a456-426655440000"
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// the topic to publish this message on
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// the version of the message
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// context of the message; either system or tenant
	//
	// Types that are valid to be assigned to Context:
	//	*PublishRequest_SystemContext
	//	*PublishRequest_TenantContext
	Context isPublishRequest_Context `protobuf_oneof:"context"`
	// source/origin urn
	// e.g. "urn:system-x.org.com/service-a"
	Source string `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// the payload for the message
	Payload *any.Any `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	// optionally, the correlation id for distributed tracing and tracking
	CorrelationId string `protobuf:"bytes,8,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// metadata for message, used for communicating contextual information
	MetaData             map[string]string `protobuf:"bytes,9,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type isPublishRequest_Context interface {
	isPublishRequest_Context()
}

type PublishRequest_SystemContext struct {
	SystemContext *SystemContext `protobuf:"bytes,4,opt,name=system_context,json=systemContext,proto3,oneof"`
}

type PublishRequest_TenantContext struct {
	TenantContext *TenantContext `protobuf:"bytes,5,opt,name=tenant_context,json=tenantContext,proto3,oneof"`
}

func (*PublishRequest_SystemContext) isPublishRequest_Context() {}

func (*PublishRequest_TenantContext) isPublishRequest_Context() {}

func (m *PublishRequest) GetContext() isPublishRequest_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PublishRequest) GetSystemContext() *SystemContext {
	if x, ok := m.GetContext().(*PublishRequest_SystemContext); ok {
		return x.SystemContext
	}
	return nil
}

func (m *PublishRequest) GetTenantContext() *TenantContext {
	if x, ok := m.GetContext().(*PublishRequest_TenantContext); ok {
		return x.TenantContext
	}
	return nil
}

func (m *PublishRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PublishRequest) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublishRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *PublishRequest) GetMetaData() map[string]string {
	if m != nil {
		return m.MetaData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PublishRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PublishRequest_SystemContext)(nil),
		(*PublishRequest_TenantContext)(nil),
	}
}

type PublishResponse struct {
	// unique UUID of the publish request
	// e.g. "123e4567-e89b-12d3-a456-426655440000"
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// unique UUID of the published message
	// e.g. "123e4567-e89b-12d3-a456-426655440000"
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// correlation id, in case it was generated (when not specified by the request)
	CorrelationId        string   `protobuf:"bytes,3,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *PublishResponse) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *PublishResponse) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

type SubscribeRequest struct {
	// unique UUID for the request
	// e.g. "123e4567-e89b-12d3-a456-426655440000"
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// the topic to subscribe to
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// message delivery option
	DeliveryOption DeliveryOption `protobuf:"varint,3,opt,name=delivery_option,json=deliveryOption,proto3,enum=eventinator.protobuf.DeliveryOption" json:"delivery_option,omitempty"`
	// for DeliveryOption.StartAtSequence
	StartAtSequence uint64 `protobuf:"varint,4,opt,name=start_at_sequence,json=startAtSequence,proto3" json:"start_at_sequence,omitempty"`
	// for DeliveryOption.StartAtTime
	StartAtTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start_at_time,json=startAtTime,proto3" json:"start_at_time,omitempty"`
	// for DeliveryOption.StartAtDuration
	StartAtDuration *duration.Duration `protobuf:"bytes,6,opt,name=start_at_duration,json=startAtDuration,proto3" json:"start_at_duration,omitempty"`
	// for DeliveryOption.StartAfterLastProcessed
	DurableName string `protobuf:"bytes,7,opt,name=durable_name,json=durableName,proto3" json:"durable_name,omitempty"`
	// if provided, will become part of a queue group
	// where messages are delivered to only one of the subscribers
	Group                string   `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SubscribeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeRequest) GetDeliveryOption() DeliveryOption {
	if m != nil {
		return m.DeliveryOption
	}
	return DeliveryOption_NewOnly
}

func (m *SubscribeRequest) GetStartAtSequence() uint64 {
	if m != nil {
		return m.StartAtSequence
	}
	return 0
}

func (m *SubscribeRequest) GetStartAtTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartAtTime
	}
	return nil
}

func (m *SubscribeRequest) GetStartAtDuration() *duration.Duration {
	if m != nil {
		return m.StartAtDuration
	}
	return nil
}

func (m *SubscribeRequest) GetDurableName() string {
	if m != nil {
		return m.DurableName
	}
	return ""
}

func (m *SubscribeRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type SubscribeResponse struct {
	// unique UUID of the subscribe request
	// e.g. "123e4567-e89b-12d3-a456-426655440000"
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// unique message UUID
	// e.g. "123e4567-e89b-12d3-a456-426655440000"
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// topic on which the message was delivered
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// message version
	// e.g. "1.0"
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// context of the message; either system or tenant
	//
	// Types that are valid to be assigned to Context:
	//	*SubscribeResponse_SystemContext
	//	*SubscribeResponse_TenantContext
	Context isSubscribeResponse_Context `protobuf_oneof:"context"`
	// source/origin urn
	// e.g. "urn:system-x.org.com/service-a"
	Source string `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	// the message payload
	Payload *any.Any `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
	// correlation id, for distributed tracing and tracking
	CorrelationId string `protobuf:"bytes,9,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// metadata for message, used for communicating contextual information
	MetaData map[string]string `protobuf:"bytes,10,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the MIME type of the data
	//
	// this will be derived from the provided payload, taking the form
	//
	//    'application/x-protobuf; messageType="x.y.Z"'
	//
	// where the messageType is the protobuf message type (corresponds with Any#type_url)
	//
	// see https://tools.ietf.org/html/draft-rfernando-protocol-buffers-00
	// https://www.charlesproxy.com/documentation/using-charles/protocol-buffers/
	// and https://prometheus.io/docs/instrumenting/exposition_formats/
	//
	ContentType string `protobuf:"bytes,11,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// UTC time the message was created
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// UTC time the message was received
	ReceivedAt *timestamp.Timestamp `protobuf:"bytes,13,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	// sequence number of the delivery
	Sequence uint64 `protobuf:"varint,14,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// indicates whether the message is a re-delivery of a previously failed delivery
	Redelivered          bool     `protobuf:"varint,15,opt,name=redelivered,proto3" json:"redelivered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SubscribeResponse) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *SubscribeResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type isSubscribeResponse_Context interface {
	isSubscribeResponse_Context()
}

type SubscribeResponse_SystemContext struct {
	SystemContext *SystemContext `protobuf:"bytes,5,opt,name=system_context,json=systemContext,proto3,oneof"`
}

type SubscribeResponse_TenantContext struct {
	TenantContext *TenantContext `protobuf:"bytes,6,opt,name=tenant_context,json=tenantContext,proto3,oneof"`
}

func (*SubscribeResponse_SystemContext) isSubscribeResponse_Context() {}

func (*SubscribeResponse_TenantContext) isSubscribeResponse_Context() {}

func (m *SubscribeResponse) GetContext() isSubscribeResponse_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SubscribeResponse) GetSystemContext() *SystemContext {
	if x, ok := m.GetContext().(*SubscribeResponse_SystemContext); ok {
		return x.SystemContext
	}
	return nil
}

func (m *SubscribeResponse) GetTenantContext() *TenantContext {
	if x, ok := m.GetContext().(*SubscribeResponse_TenantContext); ok {
		return x.TenantContext
	}
	return nil
}

func (m *SubscribeResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SubscribeResponse) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SubscribeResponse) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *SubscribeResponse) GetMetaData() map[string]string {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *SubscribeResponse) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *SubscribeResponse) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *SubscribeResponse) GetReceivedAt() *timestamp.Timestamp {
	if m != nil {
		return m.ReceivedAt
	}
	return nil
}

func (m *SubscribeResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *SubscribeResponse) GetRedelivered() bool {
	if m != nil {
		return m.Redelivered
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubscribeResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubscribeResponse_SystemContext)(nil),
		(*SubscribeResponse_TenantContext)(nil),
	}
}

func init() {
	proto.RegisterEnum("eventinator.protobuf.DeliveryOption", DeliveryOption_name, DeliveryOption_value)
	proto.RegisterType((*SystemContext)(nil), "eventinator.protobuf.SystemContext")
	proto.RegisterType((*TenantContext)(nil), "eventinator.protobuf.TenantContext")
	proto.RegisterType((*PublishRequest)(nil), "eventinator.protobuf.PublishRequest")
	proto.RegisterMapType((map[string]string)(nil), "eventinator.protobuf.PublishRequest.MetaDataEntry")
	proto.RegisterType((*PublishResponse)(nil), "eventinator.protobuf.PublishResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "eventinator.protobuf.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "eventinator.protobuf.SubscribeResponse")
	proto.RegisterMapType((map[string]string)(nil), "eventinator.protobuf.SubscribeResponse.MetaDataEntry")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x61, 0x8f, 0xdb, 0x44,
	0x10, 0xad, 0x2f, 0xb9, 0x24, 0x1e, 0x37, 0x8e, 0x6f, 0x7b, 0x50, 0x5f, 0x50, 0x21, 0x84, 0x96,
	0x46, 0x45, 0x4a, 0xab, 0x20, 0xa4, 0x42, 0x25, 0xa4, 0x94, 0xab, 0x44, 0xa4, 0x6b, 0xef, 0xe4,
	0x9c, 0x84, 0xd4, 0x0f, 0x58, 0x1b, 0x7b, 0xee, 0x6a, 0xe1, 0xd8, 0x66, 0x77, 0x1d, 0xf0, 0x47,
	0xe0, 0xd7, 0xf0, 0x33, 0xf8, 0x67, 0x68, 0xd7, 0xeb, 0x34, 0xbe, 0xe6, 0x48, 0x81, 0xfb, 0xe6,
	0x79, 0x33, 0x3b, 0xbb, 0x79, 0xf3, 0xe6, 0x05, 0x4c, 0x9a, 0x45, 0xe3, 0x8c, 0xa5, 0x22, 0x25,
	0x87, 0xb8, 0xc2, 0x44, 0x44, 0x09, 0x15, 0x29, 0x2b, 0xa1, 0x45, 0x7e, 0xd1, 0x3f, 0xba, 0x4c,
	0xd3, 0xcb, 0x18, 0x1f, 0x57, 0xc0, 0x63, 0x9a, 0x14, 0x65, 0xb6, 0xff, 0xf1, 0xd5, 0x54, 0x98,
	0x33, 0x2a, 0xa2, 0x34, 0xd1, 0xf9, 0x4f, 0xae, 0xe6, 0x45, 0xb4, 0x44, 0x2e, 0xe8, 0x32, 0x2b,
	0x0b, 0x86, 0x4f, 0xa1, 0x3b, 0x2f, 0xb8, 0xc0, 0xe5, 0x77, 0x69, 0x22, 0xf0, 0x57, 0x41, 0x1e,
	0x42, 0x2f, 0xe7, 0xc8, 0xfc, 0x28, 0x94, 0x2f, 0xb9, 0x88, 0x90, 0xb9, 0xc6, 0xc0, 0x18, 0x99,
	0x9e, 0x2d, 0xe1, 0xd9, 0x1a, 0x1d, 0x22, 0x74, 0xcf, 0x31, 0xa1, 0x89, 0xf8, 0xb7, 0x27, 0xc9,
	0x17, 0x70, 0x20, 0xd4, 0xc9, 0xcd, 0xd2, 0x3d, 0x55, 0xea, 0x94, 0x89, 0x8d, 0x6b, 0xfe, 0x68,
	0x82, 0x7d, 0x96, 0x2f, 0xe2, 0x88, 0xbf, 0xf1, 0xf0, 0xe7, 0x1c, 0xb9, 0x20, 0xf7, 0x00, 0x58,
	0xf9, 0xe9, 0x47, 0xa1, 0xbe, 0xc3, 0xd4, 0xc8, 0x2c, 0x24, 0x87, 0xb0, 0x2f, 0xd2, 0x2c, 0x0a,
	0x74, 0xcb, 0x32, 0x20, 0x2e, 0xb4, 0x57, 0xc8, 0x78, 0x94, 0x26, 0x6e, 0x43, 0xe1, 0x55, 0x48,
	0x4e, 0xc0, 0xe6, 0x8a, 0x02, 0x3f, 0x28, 0x7f, 0x89, 0xdb, 0x1c, 0x18, 0x23, 0x6b, 0xf2, 0xd9,
	0x78, 0xdb, 0x34, 0xc6, 0x35, 0xba, 0xbe, 0xbf, 0xe5, 0x75, 0x79, 0x8d, 0xbf, 0x13, 0xb0, 0xf5,
	0x8f, 0xab, 0xba, 0xed, 0xff, 0x53, 0xb7, 0x1a, 0x85, 0xb2, 0x9b, 0xa8, 0x71, 0xfa, 0x21, 0xb4,
	0x78, 0x9a, 0xb3, 0x00, 0xdd, 0x96, 0x7a, 0xb4, 0x8e, 0xc8, 0x18, 0xda, 0x19, 0x2d, 0xe2, 0x94,
	0x86, 0x6e, 0x5b, 0xb5, 0x3f, 0x1c, 0x97, 0x93, 0x7e, 0xdb, 0x79, 0x9a, 0x14, 0x5e, 0x55, 0x44,
	0x1e, 0x80, 0x1d, 0xa4, 0x8c, 0x61, 0xac, 0xc4, 0x21, 0x69, 0xeb, 0xa8, 0x7e, 0xdd, 0x0d, 0x74,
	0x16, 0x92, 0x53, 0x30, 0x97, 0x28, 0xa8, 0x1f, 0x52, 0x41, 0x5d, 0x73, 0xd0, 0x18, 0x59, 0x93,
	0xc9, 0xf6, 0x77, 0xd7, 0x47, 0x32, 0x7e, 0x89, 0x82, 0x1e, 0x53, 0x41, 0x5f, 0x24, 0x82, 0x15,
	0x5e, 0x67, 0xa9, 0xc3, 0xfe, 0x33, 0xe8, 0xd6, 0x52, 0xc4, 0x81, 0xc6, 0x4f, 0x58, 0xe8, 0xa1,
	0xc9, 0x4f, 0x39, 0xae, 0x15, 0x8d, 0x73, 0xac, 0xc6, 0xa5, 0x82, 0x6f, 0xf6, 0x9e, 0x1a, 0xcf,
	0x4d, 0x68, 0x6b, 0x0e, 0x87, 0x2b, 0xe8, 0xad, 0x6f, 0xe4, 0x59, 0x9a, 0x70, 0xdc, 0xa5, 0x82,
	0x7b, 0x00, 0x4b, 0xe4, 0x9c, 0x5e, 0xa2, 0x4c, 0x97, 0xbd, 0x4d, 0x8d, 0xcc, 0xb6, 0x11, 0xd2,
	0xd8, 0x42, 0xc8, 0xf0, 0xf7, 0x06, 0x38, 0xf3, 0x7c, 0xc1, 0x03, 0x16, 0x2d, 0xf0, 0x7f, 0xe9,
	0xef, 0x25, 0xf4, 0x42, 0x8c, 0xa3, 0x15, 0xb2, 0xc2, 0x4f, 0x33, 0x51, 0xe9, 0xd0, 0x9e, 0xdc,
	0xdf, 0x4e, 0xf0, 0xb1, 0x2e, 0x3e, 0x55, 0xb5, 0x9e, 0x1d, 0xd6, 0x62, 0xf2, 0x08, 0x0e, 0xb8,
	0xa0, 0x4c, 0xf8, 0x54, 0xf8, 0x5c, 0x5e, 0x9d, 0x04, 0xa8, 0x74, 0xdb, 0xf4, 0x7a, 0x2a, 0x31,
	0x15, 0x73, 0x0d, 0x93, 0x6f, 0xa1, 0xbb, 0xae, 0x95, 0xfb, 0xaf, 0x15, 0xd9, 0x7f, 0x47, 0x32,
	0xe7, 0x95, 0x39, 0x78, 0x96, 0xee, 0x21, 0x11, 0xf2, 0x62, 0xe3, 0xae, 0xca, 0x5f, 0x94, 0x1e,
	0xad, 0xc9, 0xd1, 0x3b, 0x3d, 0x8e, 0x75, 0xc1, 0xfa, 0x19, 0x15, 0x40, 0x3e, 0x85, 0xdb, 0xf2,
	0xf4, 0x22, 0x46, 0x3f, 0xa1, 0x4b, 0x54, 0xc2, 0x35, 0x3d, 0x4b, 0x63, 0xaf, 0xe8, 0x12, 0x25,
	0x75, 0x97, 0x2c, 0xcd, 0x33, 0xad, 0xce, 0x32, 0x18, 0xfe, 0xd6, 0x82, 0x83, 0x8d, 0x21, 0xdc,
	0xc8, 0xfc, 0xd7, 0x43, 0x6a, 0x5c, 0x63, 0x12, 0xcd, 0x5d, 0x26, 0xb1, 0x7f, 0xa3, 0x26, 0xd1,
	0xba, 0x11, 0x93, 0x68, 0x5f, 0x67, 0x12, 0x9d, 0xff, 0x66, 0x12, 0xe6, 0x36, 0x93, 0xf0, 0x36,
	0x4d, 0x02, 0x94, 0x49, 0x7c, 0x75, 0x0d, 0x0b, 0x57, 0x87, 0x76, 0x9d, 0x4f, 0x48, 0x6d, 0x28,
	0x26, 0x12, 0xe1, 0x8b, 0x22, 0x43, 0xd7, 0x2a, 0xb5, 0xa1, 0xb1, 0xf3, 0x22, 0x43, 0xf2, 0x35,
	0x40, 0xc0, 0x90, 0x0a, 0x0c, 0x7d, 0x2a, 0xdc, 0xdb, 0x3b, 0x25, 0x6c, 0xea, 0xea, 0xa9, 0x20,
	0xcf, 0xc0, 0x62, 0x18, 0x60, 0xb4, 0x2a, 0xcf, 0x76, 0x77, 0x9e, 0x85, 0xaa, 0x7c, 0x2a, 0x48,
	0x1f, 0x3a, 0xeb, 0x05, 0xb3, 0xd5, 0x82, 0xad, 0x63, 0x32, 0x90, 0x8d, 0xf5, 0x66, 0x62, 0xe8,
	0xf6, 0x06, 0xc6, 0xa8, 0xe3, 0x6d, 0x42, 0x37, 0x65, 0x80, 0x8f, 0xfe, 0x34, 0xc0, 0xae, 0x5b,
	0x02, 0xb1, 0xa0, 0xfd, 0x0a, 0x7f, 0x39, 0x4d, 0xe2, 0xc2, 0xb9, 0x45, 0xee, 0xc2, 0x1d, 0x9d,
	0x9e, 0xc6, 0xf1, 0x74, 0x45, 0xa3, 0x58, 0x2e, 0x95, 0x63, 0x90, 0x3b, 0xd0, 0x9b, 0xd7, 0xfd,
	0xc0, 0xd9, 0x23, 0x3d, 0xb0, 0xe6, 0x6f, 0x17, 0xdc, 0x69, 0x6c, 0x54, 0x55, 0xeb, 0xea, 0x34,
	0xc9, 0x11, 0x7c, 0xa0, 0xc0, 0x1f, 0x22, 0xf1, 0xe6, 0x84, 0x72, 0xe1, 0x69, 0x52, 0x9c, 0x7d,
	0xf2, 0x11, 0xdc, 0x2d, 0xeb, 0x2f, 0x04, 0x32, 0x99, 0x3b, 0x63, 0x69, 0x80, 0x9c, 0x63, 0xe8,
	0xb4, 0x26, 0x7f, 0x19, 0xd0, 0x98, 0x9e, 0xcd, 0xc8, 0x6b, 0x68, 0x6b, 0xd3, 0x26, 0xf7, 0xdf,
	0xe7, 0x5f, 0xa4, 0xff, 0x60, 0x47, 0x55, 0x29, 0xa2, 0x91, 0xf1, 0xc4, 0x20, 0x3f, 0x82, 0xb9,
	0x56, 0x17, 0xf9, 0x7c, 0xa7, 0xfc, 0xca, 0xfe, 0x0f, 0xdf, 0x53, 0xa6, 0x4f, 0x8c, 0xe7, 0xf0,
	0xba, 0x53, 0xe5, 0x17, 0x2d, 0xf5, 0xf5, 0xe5, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x15, 0x1f,
	0xee, 0x1d, 0xa9, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// publish the given message
	Publish(ctx context.Context, opts ...grpc.CallOption) (API_PublishClient, error)
	// subscribe to messages (via fanout)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Publish(ctx context.Context, opts ...grpc.CallOption) (API_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/eventinator.protobuf.API/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPublishClient{stream}
	return x, nil
}

type API_PublishClient interface {
	Send(*PublishRequest) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type aPIPublishClient struct {
	grpc.ClientStream
}

func (x *aPIPublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIPublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/eventinator.protobuf.API/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type aPISubscribeClient struct {
	grpc.ClientStream
}

func (x *aPISubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// publish the given message
	Publish(API_PublishServer) error
	// subscribe to messages (via fanout)
	Subscribe(*SubscribeRequest, API_SubscribeServer) error
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Publish(srv API_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedAPIServer) Subscribe(req *SubscribeRequest, srv API_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).Publish(&aPIPublishServer{stream})
}

type API_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type aPIPublishServer struct {
	grpc.ServerStream
}

func (x *aPIPublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIPublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Subscribe(m, &aPISubscribeServer{stream})
}

type API_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type aPISubscribeServer struct {
	grpc.ServerStream
}

func (x *aPISubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventinator.protobuf.API",
	HandlerType: (*APIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _API_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _API_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
