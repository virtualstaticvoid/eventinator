syntax = "proto3";

package eventinator;

option go_package = "go.virtualstaticvoid.com/eventinator/protobuf";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// publish request type
message PublishRequest {

  // unique UUID for the request
  // e.g. "123e4567-e89b-12d3-a456-426655440000"
  string request_id = 1;

  // the topic and version should be derived
  // from the payload protobuf definition options

  // the topic to publish this message on
  string topic = 2;

  // the version of the message
  string version = 3;

  // reserved = 4;
  // reserved = 5;

  // source/origin urn
  // e.g. "urn:system-x.org.com/service-a"
  string source = 6;

  // the payload for the message
  google.protobuf.Any payload = 7;

  // optionally, the correlation id for distributed tracing and tracking
  string correlation_id = 8;

  // metadata for message, used for communicating contextual information
  map<string, string> meta_data = 9;

}

message PublishResponse {

  // unique UUID of the publish request
  // e.g. "123e4567-e89b-12d3-a456-426655440000"
  string request_id = 1;

  // unique UUID of the published message
  // e.g. "123e4567-e89b-12d3-a456-426655440000"
  string message_id = 2;

  // correlation id, in case it was generated (when not specified by the request)
  string correlation_id = 3;

}

// options for the delivery of messages
enum DeliveryOption {
  // only new messages since subscription started
  // this is the default option
  NewOnly = 0;
  // use with care as delivers all messages since system epoch
  DeliverAllAvailable = 1;
  // a specific message
  StartAtSequence = 2;
  // messages since date/time
  StartAtTime = 3;
  // messages in the last 10 minutes
  StartAtDuration = 4;
  // from the last received message (1)
  StartWithLastReceived = 5;
  // start after last acknowledged message (durable subscription per subscriber)
  StartAfterLastProcessed = 6;
}

message SubscribeRequest {

  // unique UUID for the request
  // e.g. "123e4567-e89b-12d3-a456-426655440000"
  string request_id = 1;

  // the topic to subscribe to
  string topic = 2;

  // message delivery option
  DeliveryOption delivery_option = 3;

  // for DeliveryOption.StartAtSequence
  uint64 start_at_sequence = 4;

  // for DeliveryOption.StartAtTime
  google.protobuf.Timestamp start_at_time = 5;

  // for DeliveryOption.StartAtDuration
  google.protobuf.Duration start_at_duration = 6;

  // for DeliveryOption.StartAfterLastProcessed
  string durable_name = 7;

  // if provided, will become part of a queue group
  // where messages are delivered to only one of the subscribers
  string group = 8;

}

message SubscribeResponse {

  // unique UUID of the subscribe request
  // e.g. "123e4567-e89b-12d3-a456-426655440000"
  string request_id = 1;

  // unique message UUID
  // e.g. "123e4567-e89b-12d3-a456-426655440000"
  string message_id = 2;

  // topic on which the message was delivered
  string topic = 3;

  // message version
  // e.g. "1.0"
  string version = 4;

  // reserved = 5;
  // reserved = 6;

  // source/origin urn
  // e.g. "urn:system-x.org.com/service-a"
  string source = 7;

  // the message payload
  google.protobuf.Any payload = 8;

  // correlation id, for distributed tracing and tracking
  string correlation_id = 9;

  // metadata for message, used for communicating contextual information
  map<string, string> meta_data = 10;

  // the MIME type of the data
  //
  // this will be derived from the provided payload, taking the form
  //
  //    'application/x-protobuf; messageType="x.y.Z"'
  //
  // where the messageType is the protobuf message type (corresponds with Any#type_url)
  //
  // see https://tools.ietf.org/html/draft-rfernando-protocol-buffers-00
  // https://www.charlesproxy.com/documentation/using-charles/protocol-buffers/
  // and https://prometheus.io/docs/instrumenting/exposition_formats/
  //
  string content_type = 11;

  // UTC time the message was created
  google.protobuf.Timestamp created_at = 12;

  // UTC time the message was received
  google.protobuf.Timestamp received_at = 13;

  // sequence number of the delivery
  uint64 sequence = 14;

  // indicates whether the message is a re-delivery of a previously failed delivery
  bool redelivered = 15;

}

// defines the service contract for publishing and subscribing to messages
service API {

  // publish the given message
  rpc Publish(stream PublishRequest) returns (stream PublishResponse);

  // subscribe to messages (via fanout)
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);

}
